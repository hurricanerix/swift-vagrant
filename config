#!/usr/bin/env python
from __future__ import print_function

import sys

try:
    import yaml
except ImportError:
    raise ImportError('please pip install pyyaml')

# Setup function for collecting input from the user.
input_func = None
if sys.version_info < (3, 0):
    input_func = raw_input
else:
    input_func = input


values = {
    'general': {
        'network': '10.0.0',
    },
    'lb': {
        'host_port': 8080,
    },
    'proxy': {
        'count': 2,
    },
    'storage': {
        'count': 4,
    }
}


prompts = [
    ('general', 'network', 'str'),
    ('lb', 'host_port', 'int'),
    ('proxy', 'count', 'int'),
    ('storage', 'count', 'int'),
]


def get_prompt(s, k):
    prompt = ''
    if s == 'proxy' or s == 'storage':
        prompt = '{0} '.format(s)
    prompt = '{0}{1}'.format(prompt, k)
    return prompt


def write_yaml(config):
    # TODO: YAML isn't that hard, just write it by hand so that the
    #       pyyaml dependency can be removed.
    with open('local.yaml', 'w') as outfile:
        outfile.write(yaml.dump(values, default_flow_style=False))


def main():
    print('generating local.yaml, leave blank to use the default value.\n')
    # TODO: read existing local.yaml if any, and populate defaults based
    #       on it.
    for s, k, t in prompts:
        prompt = get_prompt(s, k)
        user_input = input_func(
            '{0} ({1}): '.format(prompt, values[s][k]))
        if user_input != '':
            if t == 'int':
                user_input = int(user_input)
            values[s][k] = user_input
    write_yaml(values)


if __name__ == '__main__':
    main()
